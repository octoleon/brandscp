- max_file_size ||= 60.megabytes
- allow_upload ||= false
- show_drag_n_drop = allow_upload && can?(:create_photo, resource)


#photos_upload_form
  = s3_uploader_form callback_url: event_photos_path(resource, format: :js), id: "photos_s3_uploader", callback_param: "attached_asset[direct_upload_url]", expiration: 24.hours.from_now.utc.iso8601, max_file_size: max_file_size do

    .gallery#media-gallery
      ul#photos-thumbs
        = render partial: 'results/photos/photo', collection: resource.active_photos.includes(:tags).map{|a| a.attachable = resource; a }

        - if show_drag_n_drop
          li.photo-drop-zone
            = drag_drop_module('photos', close_button_class)

- if show_drag_n_drop
  |
    <script id="template-upload" type="text/x-tmpl">
    <li id="processed_asset_{%=o.unique_id%}">
      <div class="attachment-panel drag-drop-zone photos progress-status">
        <div class="attachment-upload-progress-info" id="upload_{%=o.unique_id%}">
          <div class="step-counter"></div>
          <div class="upload-file-info">
            <div class="documents-counter"></div>
            <div class="document-info">
              <span class="document-name">{%=o.name%}</span>
              <span class="document-size">{%=o.size%}</span>
            </div>
          </div>
          <div class="upload-file-progress">
            <div class="progress">
              <div class="bar" style="width: 0%"></div>
            </div>
            <i id="upload-file-cancel" class="icon-remove-circle"></i>
          </div>
        </div>
      </div>
    </li>
    </script>


- if show_drag_n_drop
  javascript:
    $(function() {
      $('#photos_s3_uploader').S3Uploader(
        {
          remove_completed_progress_bar: false,
          progress_bar_target: $('#media-gallery #photos-thumbs'),
          progress_bar_target_prepend: true,
          drop_zone: $("#drag-drop-photos"),
          limit_concurrent_uploads: 3,
          sequential_uploads: false,
          cancel_upload_target: '#upload-file-cancel',
          before_add: function(file) {
            var file, file_types;
            file_types = /(\.|\/)(gif|jpe?g|png|mp4|wmv|mov|flv|avi)$/i;

            if (file.size > #{max_file_size}){
              window.EventDetails.showMessage('File is larger than maximum file size supported (#{max_file_size.to_s(:human_size)})', 'red');
              return false;
            }

            if (file_types.test(file.type) || file_types.test(file.name)) {
              return true;
            } else {
              window.EventDetails.showMessage('File is not in a supported image format. ('+file.name+')', 'red');
              return false;
            }
          }
        }
      ).bind('fileuploadprogress', function (e, data) {
        var progress = parseInt(data.loaded / data.total * 100, 10);
        context = data.context.find('.attachment-upload-progress-info');

        context.show();
        context.find('.progress .bar').css({ width: progress + '%' });
        context.find('.step-counter').text('STEP 1 OF 2');
        context.find('.documents-counter').text('Uploading...');
        context.find('.document-name').text(data.files[0].name);
        context.find('.document-size').text(filesize(data.files[0].size));
      }).bind('fileuploaddone', function (e, data) {
        context.find('.progress').hide();
        context.find('.document-name').hide();
        context.find('.document-size').hide();
        context.find('.upload-file-cancel').hide();
      }).bind('fileuploadfail', function(e, data) {
        data.context.remove();
      });
    });
