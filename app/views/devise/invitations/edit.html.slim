.login_box.first_login
  h2  Welcome #{resource.first_name}!
  p Before we get started, please tell us a bit about yourself.

  = simple_form_for(resource, :as => resource_name, :url => invitation_path(resource_name), :html => { :method => :put }) do |f|
    = devise_error_messages!
    = f.hidden_field :invitation_token

    div.form-inputs.chzn-container
      = f.input :accepting_invitation, input_html: {:value => true}, :as => :hidden
      .row-fluid
        .span6
          = f.input :first_name, :autofocus => true
        .span6
          = f.input :last_name
      .row-fluid
        = f.input :email
      .row-fluid
        = f.input :phone_number, required: true
      .row-fluid
        = f.input :street_address, label: 'Address', required: true
      .row-fluid
        = f.input :unit_number, label: false
      .row-fluid
        .span6
          = f.input :country, priority: ['US'], iso_codes: true, required: true, input_html: {class: 'chosen-enabled'}
        .span6
          = f.input :city, required: true
      .row-fluid
        .span6
          = f.input :state, collection: (resource.country.present? ? Country.new(resource.country).states.map{|k, info| [info['name'],k]} : []), required: true, input_html: {class: 'chosen-enabled'}
        .span6
          = f.input :zip_code, required: true
      .row-fluid
        .span12
          = f.input :time_zone, required: true, input_html: {class: 'chosen-enabled'}
      .row-fluid
        = f.input :password, :label => "New Password", :required => true, :input_html => {class: 'oneupperletter onedigit', minlength: 8, maxlength: 128}, hint: 'Password must contain at least 8 characters, at least 1 number, at least 1 lowercase character (a-z) and at least 1 uppercase character (A-Z)'
      .row-fluid
        = f.input :password_confirmation, :label => "Confirm New Password", :required => true, :input_html => {class: 'matchconfirmation'}

      = f.button :submit, "Save", class: 'btn btn-primary'

  javascript:
    $('#user_time_zone').set_timezone({'mappings':#{ActiveSupport::TimeZone::MAPPING.invert.to_json.html_safe}});

  coffee:
    $('#user_country').change () ->
      $.get '/countries/states.json', {country: $(this).val()}, (response) ->
        states = $('#user_state')
        val = states.val()
        states.html('<option></option>')
        if response.states
          for state in response.states
            option = $('<option>').val(state.id).html(state.name)
            if val is state.id
              option.attr('selected', 'selected')
            states.append(option)
        states.trigger('liszt:updated')
    $('#user_country').change();

