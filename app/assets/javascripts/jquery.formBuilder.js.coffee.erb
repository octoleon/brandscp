$.widget 'nmk.formBuilder', {
	options: {
		resourceName: null,
		url: null,
		exportUrl: null,
		canEdit: false,
		canActivateKpis: false,
		defaultExpensesCategories: []
	},
	_create: () ->
		@modified = false
		@_updateSaveButtonState()

		@wrapper = @element.find('.form-wrapper')
		if @options.canEdit
			@wrapper.append $('<div class="form-builder-actions" data-spy="affix" data-offset-top="340"></div>').append(
				$('<button id="save-report" class="btn btn-primary">Save</button>'),
				$('<a href="'+@options.exportUrl+'" class="btn download pull-right"><i class="icon icon-download"></a>'),
				$('<div data-placement="left" class="invisible pull-right field-tooltip-trigger"></div>')
			)

			@fieldTooltip = @wrapper.find('.field-tooltip-trigger').tooltip
				placement: 'left'
				html: true
				title: () ->
					$(this).data('title')
		@formWrapper = @wrapper.find('.form-fields')
		@formSections = @wrapper.find('.form-fields-sections')

		@wrapper.find('.form-builder-actions').affix
			offset: {
				top: () =>
					if @wrapper.find('.form-builder-actions').hasClass('affix')
						@wrapper.find('.form-builder-actions').css top: $('#resource-close-details').position().top + $('#resource-close-details').outerHeight()
					else
						@wrapper.find('.form-builder-actions').css top: 0
					@formWrapper.offset().top - (parseInt($('#resource-close-details').css('top'),10) - 3 + $('#resource-close-details').outerHeight())
			}

		$(window).resize()

		@fieldsWrapper = @element.find('.fields-wrapper')

		@formWrapper.droppable
			accept: ".field.module"
			drop: (event, ui) =>
				options = {type: ui.draggable.data('type')}
				@_addModuleToForm options
				@setModified()
				true

		@element.find('.field-search-input').on 'keyup', (e) =>
			@searchFieldList $(e.target).val().toLowerCase()

		@attributesPanel = $('<div class="field-attributes-panel">').
			css({position: 'absolute', display: 'none'}).
			appendTo($('body')).
			on 'click', (e) =>
				e.stopPropagation()
				true

		if @options.canEdit
			@formWrapper.sortable
				items: "> div.field"
				cancel: '.empty-form-legend, .module'
				revert: true,
				stop: (e, ui) =>
					@element.find('.empty-form-legend').hide()
					if ui.item.hasClass('ui-draggable')
						options = {type: ui.item.data('type')}
						if ui.item.data('kpi-id')
							options = @fieldsWrapper.find('.field[data-kpi-id="'+ui.item.data('kpi-id')+'"]').data('options')
						fieldHtml = @buildField(options)
						field = fieldHtml.data('field')
						ui.item.replaceWith fieldHtml
						applyFormUiFormatsTo fieldHtml
						if field.attributes.kpi_id?
							@fieldsWrapper.find("[data-kpi-id=#{field.attributes.kpi_id}]").addClass('hidden')

					@_updateOrdering();

					@setModified()
					@formWrapper.find('.clearfix').appendTo(@formWrapper)
				over: (event, ui) =>
					@formWrapper.addClass 'sorting'
					@element.find('.empty-form-legend').hide()

				out: (event, ui) =>
					if @formFields(false).length == 0
						@element.find('.empty-form-legend').show()
					@formWrapper.removeClass 'sorting'

				receive: (event, ui) =>
					if ui.item.hasClass('module')
						@formWrapper.sortable 'cancel'
					else
						@element.find('.empty-form-legend').hide()

		if @options.canEdit
			@makeFieldsDraggable @fieldsWrapper

			# Display Field Attributes Dialog
			@formSections.on 'click', '.field, .module', (e) =>
				e.stopPropagation()
				$field = $(e.target)
				if not $field.hasClass('field')
					$field = $field.closest('.field, .module')
				@_showFieldAttributes $field
				false

		@_loadForm()

		if @options.canEdit
			@element.on 'click', '#save-report', (e) =>
				@saveFields()
				false
			$(window).on 'beforeunload.formBuilder', =>
				if @modified
					'You are leaving the page without saving your changes in the form.'

		$('#kpis-fields').on 'show.first', (e) =>
			$('#kpis-fields').off 'show.first'
			list = $('#kpis-fields').find('.scrollable-list').empty()
			$.get '/kpis.json', (kpiList) =>
				for group, kpis of kpiList
					list.append $('<div class="group-name">').text(group),
						$('<div class="fields-list">').append $.map kpis, (kpi) =>
							tooltip = "<p class=\"name\">#{kpi.name}</p>" +
								"<p class=\"description\">#{kpi.description}</p>" +
								"<b>TYPE</b>" +
								(if kpi.options and kpi.options.options then "<b>OPTIONS</b>" + kpi.options.options.map( (i, o) => o.name ) .join(', ') else '')


							$('<div class="field flat">').attr({
								'data-title': tooltip,
								'data-type': kpi.type,
								'data-group': group,
								'data-kpi-id': kpi.id
							}).data('options', kpi.options).text(kpi.name).addClass(if @kpiInForm(kpi.options) then 'hidden' else '')
				list.jScrollPane verticalDragMinHeight: 10
				@makeFieldsDraggable list

				list.find('.field[data-title]').tooltip
					html: true, container: @element, delay: 0, animation: false
					title: (a, b) ->
						$(this).data('title')
					placement: (tooltip, field) ->
						window.setTimeout ->
							$(tooltip).css
								left: (parseInt($(tooltip).css('left'))-15)+'px'
						10

						return 'left';


		true

	searchFieldList: (value) ->
		$list = @element.find('.searchable-field-list')
		for field in $list.find(".field:not(.hidden)")
			if $(field).text().toLowerCase().search(value) > -1
				$(field).show()
			else
				$(field).hide()

		$list.find('.group-name').show()
		for group in $('.group-name').get()
			group_name = $(group).text()
			if $list.find('.field[data-group="'+group_name+'"]:visible').length is 0
				$(group).hide()
				$list.find('.field[data-group="'+group_name+'"]:not(.hidden)').hide()
			else
				$(group).show()
		scrollerApi = $('.searchable-field-list .scrollable-list').data('jsp')
		scrollerApi.reinitialise()
		true

	makeFieldsDraggable: (container) ->
		container.find('.field:not(.module)').draggable
			connectToSortable: ".form-fields"
			revert: "invalid"
			appendTo: @fieldsWrapper
			helper: (a, b) =>
				$target = $(a.target)
				$target = $target.closest('.field') unless $target.hasClass('field')
				options = {type: $target.data('type')}
				if $target.data('options')
					options = $target.data('options');
				@buildField options
			start: (e, ui) =>
				ui.helper.css({width: ui.helper.outerWidth(), height: ui.helper.outerHeight()})
				applyFormUiFormatsTo(ui.helper)

		container.find('.field, .module').on 'click', (e) =>
			return if e.target.adding
			e.target.adding = setTimeout () ->
				e.target.adding = false
			, 1000
			target = $(e.target)
			target = target.closest('.field') unless target.hasClass('field')
			options = {type: target.data('type')}
			options = target.data('options') if target.data('options')
			if target.hasClass('module')
				field = @_addModuleToForm options
				message = "Adding #{field.type} module at the bottom..."
			else
				if field = @_addFieldToForm options
					@_updateOrdering()
					message = "Adding new #{field.attributes.name} field at the bottom..."
			@setModified()
			@fieldTooltip.data('title', message).tooltip 'show'
			clearTimeout @_toolTipTimeout if @_toolTipTimeout
			@_toolTipTimeout = setTimeout =>
				@fieldTooltip.tooltip 'hide'
			, 1000

		container.find('.field.module').draggable
			revert: "invalid"
			appendTo: @fieldsWrapper
			helper: (a, b) =>
				$target = $(a.target)
				options = {type: $target.data('type')}
				if $target.data('options')
					options = $target.data('options')
				@buildField options
			start: (e, ui) =>
				ui.helper.css({width: ui.helper.outerWidth(), height: ui.helper.outerHeight()})
				applyFormUiFormatsTo(ui.helper)

	_updateOrdering: () ->
		$.map @formWrapper.find("> div.field"), (field, index) =>
			$(field).data('field').attributes.ordering = index

	_loadForm: () ->
		@element.find('.empty-form-legend').hide()
		$.ajaxSetup({ cache: false })
		$.getJSON "#{@options.url}", (response) =>
			@formWrapper.find('.field').remove()
			@element.find('.form-section.module').remove()
			@modified = false
			@_updateSaveButtonState()
			if response.form_fields.length > 0 || (response.modules && Object.keys(response.modules).length > 0)
				if response.form_fields.length > 0
					for field in response.form_fields
						@_addFieldToForm field
				if response.modules
					for own moduleName, options of response.modules
						field = {type: @_capitalize(moduleName.replace(/_/g, ' ')), settings: options.settings}
						if moduleName is 'surveys'
							field.settings = {brands: response.survey_brand_ids}
						@_addModuleToForm field

			else
				@element.find('.empty-form-legend').show()
		$.ajaxSetup({ cache: true })

		# So the save bar (affix) is correctly placed
		setTimeout () =>
			$(window).trigger('scroll')
			$(window).trigger('scroll')
			$(window).trigger('scroll')
		, 500

	_addFieldToForm: (options) ->
		@element.find('.empty-form-legend').hide()
		if options.kpi_id? && @kpiInForm(options)
			return false

		fieldHtml = @buildField(options)
		@formWrapper.append fieldHtml
		@formWrapper.sortable "refresh" if @options.canEdit
		applyFormUiFormatsTo fieldHtml

		field = fieldHtml.data('field')
		if field.attributes.kpi_id?
			@fieldsWrapper.find("[data-kpi-id=#{field.attributes.kpi_id}]").addClass('hidden')

		field


	_addModuleToForm: (field) ->
		moduleHtml = @buildField(field)
		@formSections.append moduleHtml
		@fieldsWrapper.find('.module[data-type='+field.type+']').hide()

		field

	buildField: (options) ->
		className = options.type.replace('FormField::', '');
		className = className+'Field'
		eval "var field = new #{className}(this, options)"
		field.render()

	saveFields: () ->
		modules = {}
		for field in @formModules()
			attributes = field.getSaveAttributes()
			modules[attributes.name] = attributes
		modules = {'empty': true} if Object.keys(modules).length is 0
		data = {
			form_fields_attributes: $.map(@formFields(), (field) => field.getSaveAttributes())
			modules: modules
		}
		$.map @formModules(), (field) =>
			attributes = field.getSaveAttributes()
			if attributes.name is 'surveys'
				data.survey_brand_ids = attributes.settings.brands
		@saveForm data

	saveForm: (data) ->
		@_hideFieldAttributes()
		$('#save-report').data('text', $('#save-report').text()) unless $('#save-report').data('text')?
		$('#save-report').text('Saving...').attr 'disabled', true
		params = {}
		params[@options.resourceName] = data
		$.ajax {
			url: "#{@options.url}",
			method: 'put',
			data: params,
			success: (response) =>
				if response.result isnt 'OK'
					bootbox.alert response.message
				else
					@modified = false
					@_loadForm()
			error: (jqXHR, textStatus, errorThrown) =>
				bootbox.alert jqXHR.responseText
				$('#save-report').attr 'disabled', false
			complete: ( jqXHR, textStatus) =>
				$('#save-report').text($('#save-report').data('text'))
		}


	removeKpi: (kpi_id) ->
		$.each @formFields(), (index, field) =>
			if field.attributes.kpi_id is kpi_id
				field.field.remove()
				@fieldsWrapper.find("[data-kpi-id=#{kpi_id}]").removeClass('hidden')

	addKpi: (options) ->
		@element.find('.empty-form-legend').hide()
		@_addFieldToForm options

	kpiInForm: (field) ->
		$.grep(@formFields(), (f) -> f.attributes.kpi_id == field.kpi_id).length > 0

	setModified: () ->
		@modified = true
		@_updateSaveButtonState()

	formFields: (includedRemoved=true) ->
		fields = $.map @formWrapper.find('.field'), (element, index) =>
			$(element).data('field')
		if includedRemoved
			fields
		else
			$.grep fields, (field, index) ->
				field.attributes._destroy isnt true

	formModules: () ->
		$.map @formSections.find('.module'), (element, index) =>
			$(element).data('field')

	placeFieldAttributes: (field) ->
		element = field;
		if field.find('.module-wrapper').length
			element = field.find('.module-wrapper');
		position = element.offset()
		@attributesPanel.removeClass('on-bottom on-left')
		if field.data('type') is 'LikertScale'
			left = position.left + ((element.outerWidth()-@attributesPanel.outerWidth())/2)
			left = Math.max(left, position.left)
			@attributesPanel.removeClass('on-left').addClass('on-bottom').css
				top: (position.top + element.outerHeight()+10) + 'px'
				left: left+'px'
				display: 'block'
		else
			@attributesPanel.addClass('on-left').removeClass('on-bottom').css
				top: position.top + 'px'
				left: (position.left + element.outerWidth())+'px'
				display: 'block'
		@

	_showFieldAttributes: (field) ->
		$field = field.data('field')
		@element.find('.selected').removeClass('selected')
		field.addClass('selected')

		if form = $field.attributesForm()
			$('#form-field-tabs a[href="#attributes"]').tab('show')
			@attributesPanel.html('').append $('<div class="arrow">'), form
			applyFormUiFormatsTo @attributesPanel

			@placeFieldAttributes field

			# Store the value of each text field to compare against on the blur event
			$.each $('input[type=text]'), (index, elm) =>
				$(elm).data 'saved-value', $(elm).val()

			$(document).on 'click.fbuidler', '.modal', (e) =>
				e.ignoreClose = true

		$(document).on 'click.fbuidler', (e) =>
			select2open = $('.select2-drop').css('display') is 'block'
			if $('.modal.in:visible').length is 0 and not e.ignoreClose? and !select2open
				@_hideFieldAttributes()

		# else
		# 	@_hideFieldAttributes()

	_hideFieldAttributes: () ->
		$(document).off 'click.fbuidler'
		@element.find('.selected').removeClass('selected')
		@attributesPanel.hide()
		$('.select2-drop, .select2-drop-mask, .select2-sizer').remove()

	_updateSaveButtonState: () ->
		$('#save-report').attr('disabled', not @modified)

	_capitalize: (string) ->
		string.replace /(?:^|\s)\S/g, (a) -> a.toUpperCase()
}


initializing = false
fnTest = if /xyz/.test(() -> xyz) then /\b_super\b/ else /.*/

Class = () ->
	@

Class.extend = (prop) ->
	_super = this.prototype;

	initializing = true;
	prototype = new this();
	initializing = false;

	for name of prop
		if typeof prop[name] == "function" && typeof _super[name] is "function" && fnTest.test(prop[name])
			prototype[name] =  ((name, fn) ->
				() ->
					tmp = this._super;

					this._super = _super[name];

					ret = fn.apply(this, arguments);
					this._super = tmp;

					return ret;
			)(name, prop[name])
		else
			prototype[name] = prop[name]

	Class = () ->
		if !initializing && this.init
			@init.apply(this, arguments);

	Class.prototype = prototype;

	Class.prototype.constructor = Class;

	Class.extend = arguments.callee;

	Class


# Base class for all form field classes
FormField = Class.extend {
	getSaveAttributes: () ->
		if @attributes._destroy? && @attributes._destroy is true
			id: @attributes.id
			_destroy: true
		else if @attributes.kpi_id
			id: @attributes.id
			name: @attributes.name
			ordering: @attributes.ordering
			required: @attributes.required
			kpi_id: @attributes.kpi_id
			field_type: @fieldType()
			settings: @attributes.settings
		else
			id: @attributes.id
			name: @attributes.name
			ordering: @attributes.ordering
			required: @attributes.required
			field_type: @fieldType()
			settings: @attributes.settings
			multiple: @attributes.multiple
			options_attributes: @getOptionsAttributes()
			statements_attributes: @getStatementsAttributes()

	getId: () ->
		@attributes.id

	labelField: (prompt = false) ->
		@initialName ||= @attributes.name
		@confirmedLabelChange ||= false
		field = $('<input type="text" id="field_name" name="name">').val(@initialName).on 'keyup', (e) =>
			input = $(e.target)
			@attributes.name = input.val()
			@form.setModified()
			@refresh()
			true

		if prompt && @attributes.id
			field.on 'blur', (e) =>
				return if @confirmedLabelChange or @initialName is field.val()
				bootbox.confirm 'Are you sure you want to change this item from "'+@initialName+'" to "'+field.val()+'?"  Doing so will change this everywhere in the system including reports and may result in inaccurately labeled data.', (answer) =>
					if answer
						@confirmedLabelChange = true
					else # Rollback change!
						field.val(@initialName).trigger 'keyup'

		$('<div class="control-group">').append([
			$('<label class="control-label" for="field_name">').text('Field label'),
			$('<div class="controls">').append field
		])

	requiredField: (label = 'Required') ->
		$('<div class="control-group">').append([
			$('<div class="controls">').append(
				$('<label class="control-label" for="option_required_chk">').text(label).prepend(
					$('<input type="checkbox" id="option_required_chk" name="required"'+(if @attributes.required then ' checked="checked"' else '')+'">').on 'change', (e) =>
						@attributes.required = (if e.target.checked then 'true' else 'false')
						@form.setModified()
						true
				)
			)
		])

	optionsType: (label = 'Allow multiple answers per statement') ->
		$('<div class="control-group">').append([
			$('<div class="controls">').append(
				$('<label class="control-label" for="option_multiple_chk">').text(label).prepend(
					$('<input type="checkbox" id="option_multiple_chk" name="multiple"'+(if @attributes.multiple then ' checked="checked"' else '')+'">').on 'change', (e) =>
						@attributes.multiple = (if e.target.checked then 'true' else 'false')
						@form.setModified()
						true
				)
			)
		])

	rangeField: (formats=false) ->
		@attributes.settings ||= {}
		classes = if formats then '' else 'range-without-format'
		$('<div class="control-group">').append([
			$('<label class="control-label range" for="field_range_min">').text('RANGE'),
			$('<div class="controls">').addClass(classes).append(
				$('<div class="range-part min">').append(
					$('<label class="control-label" for="field_range_min">').text('Min'),
					$('<input type="text" id="field_range_min" name="min">').val(@attributes.settings.range_min).on 'keyup', (e) =>
						input = $(e.target)
						if @attributes.settings.range_format isnt 'value'
							input.val(input.val().replace(/[^0-9]/, ''))
						else
							input.val(input.val().replace(/[^0-9\.]/, ''))
						@attributes.settings.range_min = input.val()
						@attributes.settings.range_format ||= $('#field_range_format').val()
						@form.setModified()
						true
				),
				$('<div class="range-part max">').append(
					$('<label class="control-label" for="field_range_max">').text('Max'),
					$('<input type="text" id="field_range_max" name="max">').val(@attributes.settings.range_max).on 'keyup', (e) =>
						input = $(e.target)
						if @attributes.settings.range_format isnt 'value'
							input.val(input.val().replace(/[^0-9]/, ''))
						else
							input.val(input.val().replace(/[^0-9\.]/, ''))
						@attributes.settings.range_max = input.val()
						@attributes.settings.range_format ||= $('#field_range_format').val()
						@form.setModified()
						true
				),
				(if formats then $('<div class="range-part format">').append(
					$('<label class="control-label" for="field_range_format">').text('Format'),
					$('<select id="field_range_format" name="range">').append(
						$.map formats, (name, key) => $('<option>').val(key).text(name).attr('selected', @attributes.settings.range_format is key )
					).val(@attributes.settings.range_format).on 'change', (e) =>
						input = $(e.target)
						@attributes.settings.range_format = input.val()
						@form.setModified()
						true
				) else null),
			)
		])

	optionsField: (type='option', titles=null) ->
		list = if type is 'statement' then @attributes.statements else @attributes.options
		min_fields_allowed = if type is 'statement' then @attributes.min_statements_allowed else @attributes.min_options_allowed
		visible_items = list.filter (item) -> not item._destroy
		titles ||= {'option': ['Option','Options'], 'statement': ['Statement', 'Statements']}[type]
		element = $('<div class="control-group field-options" data-type="'+type+'">').append($('<label class="control-label">').text(titles[1])).append(
			$.map list, (option, index) =>
				optionHidden = option._destroy is '1'
				$('<div class="controls field-option">').addClass(if @_optionIsExcluded(option) then 'disabled-option' else '' ).data('option', option).append([
					$('<input type="hidden" name="'+type+'['+index+'][id]">').val(option.id),
					$('<input type="hidden" name="'+type+'['+index+'][_destroy]">'),
					$('<input type="text" name="'+type+'['+index+'][name]">').attr('readonly', (@attributes.kpi_id || !@form.options.canEdit)).val(option.name).on 'keyup', (e) =>
						if @form.options.canEdit
							option = $(e.target).closest('.field-option').data('option')
							option.name = $(e.target).val()
							@form.setModified()
							@refresh()
							true
					$('<div class="option-actions">').append(
						if @attributes.kpi_id
							[
								if @_optionIsExcluded(option)
									# Button for adding a new option to the field
									$('<a href="#" class="icon icon-rounded-ok disabled-kpi-option" title="Activate this option"></a>').on 'click', (e) =>
										option = $(e.target).closest('.field-option').data('option')
										if @attributes.settings.disabled_segments
											index = @attributes.settings.disabled_segments.indexOf("#{option.id}")
											@attributes.settings.disabled_segments.splice(index, 1)
											$('.field-options[data-type='+type+']').replaceWith @optionsField(type, titles)
											@refresh()
											@form.setModified()
										false
								else
									# Button for deactivating a segment for a KPI field
									$('<a href="#" class="icon icon-remove-circle enabled-kpi-option" title="Deactivate this option"></a>').on 'click', (e) =>
										bootbox.confirm "Are you sure you want to disable the #{type} \"#{option.name}\" for this KPI?", (result) =>
											if result
												option = $(e.target).closest('.field-option').data('option')
												@attributes.settings ||= {}
												@attributes.settings.disabled_segments ||= []
												@attributes.settings.disabled_segments.push "#{option.id}"
												$('.field-options[data-type='+type+']').replaceWith @optionsField(type, titles)
												@refresh()
												@form.setModified()
										false
							]
						else
							[
								if @form.options.canEdit
									# Button for adding a new option to the field
									$('<div class="option-wrapper"><a href="#" class="icon-plus-sign" title="Add option after this"></a></div>').on 'click', (e) =>
										option = $(e.target).closest('.field-option').data('option')
										index = list.indexOf(option)+1
										list.splice(index,0, {id: null, name: titles[0] + ' ' + (list.length+1), ordering: index})
										item.ordering = i for item,i in list
										$('.field-options[data-type='+type+']').replaceWith @optionsField(type, titles)
										@refresh()
										@form.setModified()
										false
								else
									null

								# Button for removing an option of the field
								if @form.options.canEdit && visible_items.length > min_fields_allowed
									$('<div class="option-wrapper"><a href="#" class="icon-minus-rounded" title="Remove this option"></a></div>').on 'click', (e) =>
										option = $(e.target).closest('.field-option').data('option')
										if option.id isnt null
											bootbox.confirm "Removing this " + type + " will remove all the entered data/answers associated with it.<br/>&nbsp;<p>Are you sure you want to do this? This cannot be undone</p>", (result) =>
												if result
													option._destroy = '1'
													$('.field-options[data-type='+type+']').replaceWith @optionsField(type, titles)
													@refresh()
													@form.setModified()
										else
											bootbox.confirm "Are you sure you want to remove this " + type + "?", (result) =>
												if result
													list.splice(list.indexOf(option),1)
													$('.field-options[data-type='+type+']').replaceWith @optionsField(type, titles)
													@refresh()
													@form.setModified()
										false
								else
									null
							]
					)
				]).css(display: (if optionHidden then 'none' else '' ))
		)

		element.find('input[type=text]').each (index, field) =>
			field.confirmedLabelChange ||= false
			field.initialName ||= $(field).val()
			option = $(field).closest('.field-option').data('option')
			if option.id
				$(field).on 'blur', (e) =>
					return if field.confirmedLabelChange or field.initialName is $(field).val()
					bootbox.confirm 'Are you sure you want to change this item from "'+ field.initialName+'" to "'+$(field).val()+'"?  Doing so will change this everywhere in the system including reports and may result in inaccurately labeled data.', (answer) =>
						if answer
							field.confirmedLabelChange = true
						else # Rollback change!
							$(field).val(field.initialName).trigger 'keyup'
		element

	getOptionsAttributes: () ->
		@attributes.options

	getStatementsAttributes: () ->
		@attributes.statements

	render: () ->
		className = @attributes.type.replace(/(.)([A-Z](?=[a-z]))/,'$1_$2').replace('::','_').toLowerCase()
		@field ||= $('<div class="field '+className+'" data-type="' + @__proto__.type + '">').data('field', @).append(
			$('<div class="control-group">').append(
				@_removeButton(),
				@_renderField()
			)
		)

	remove: () ->
		if @attributes.id # If this file already exists on the database
			bootbox.confirm @_removeConfirmationMessage(true), (result) =>
				if result
					@field.hide()
					@attributes._destroy = true
					@form.setModified()
					@form._hideFieldAttributes()
					if @form.formFields(false).length == 0
						@form.element.find('.empty-form-legend').show()
					if @attributes.kpi_id?
						@form.fieldsWrapper.find("[data-kpi-id=#{@attributes.kpi_id}]").removeClass('hidden')
		else
			bootbox.confirm @_removeConfirmationMessage(false), (result) =>
				if result
					@field.remove()
					@form.setModified()
					@form._hideFieldAttributes()
					if @form.formFields(false).length == 0
						@form.element.find('.empty-form-legend').show()
					@_onRemove()
		false

	_removeConfirmationMessage: (withData) ->
		if withData
			"Removing this field will remove all the entered data/answers associated with it.<br/>&nbsp;<p>Are you sure you want to do this?</p>"
		else
			"Are you sure you want to remove this field?"

	_optionIsExcluded: (option) ->
		(@attributes.kpi_id && @attributes.settings.disabled_segments && @attributes.settings.disabled_segments.indexOf("#{option.id}") >= 0)

	refresh: () ->
		@field.html('').append(
			$('<div class="control-group">').append(
				@_removeButton(),
				@_renderField()
			)
		)
		applyFormUiFormatsTo @field
		@field.trigger 'change'
		@

	_onRemove: ->
		if @attributes.kpi_id?
			@form.fieldsWrapper.find("[data-kpi-id=#{@attributes.kpi_id}]").removeClass('hidden')

	_removeButton: ->
		if (@form.options.canEdit && !@attributes.kpi_id) || (@form.options.canActivateKpis && @attributes.kpi_id)
			$('<a class="close" href="#" title="Remove"><i class="icon-remove-circle"></i></a>').on 'click', => @remove()

	_renderField: ->
		''

	fieldType: ->
		"FormField::#{@__proto__.type}"
}

SectionField = FormField.extend {
	type: 'Section',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Section',
			id: null,
			required: false,
			type: 'FormField::Section',
			settings: {}
		}, attributes)

		@attributes.settings ||= {description: null}

		@

	_renderField: () ->
		[
			description =
			$('<h3 class="section-title">').text(@attributes.name),
			(if @attributes.settings.description then $('<p class="section-description">').html(@_nl2br(@attributes.settings.description)) else null)
		]

	descriptionField: () ->
		$('<div class="control-group">').append([
			$('<label class="control-label" for="field_description">').text('Description'),
			$('<div class="controls">').append $('<textarea id="field_description" name="description">').val(@attributes.settings.description).on 'keyup', (e) =>
					input = $(e.target)
					@attributes.settings.description = input.val()
					@form.setModified()
					@refresh()
					true
		])

	_nl2br: (str) ->
		breakTag = '<br>';
		s = (str + '').replace(/</g, '&lt;').replace(/>/g, '&gt;')
		s.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + breakTag + '$2')

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@descriptionField()
		]
}


TextAreaField = FormField.extend {
	type: 'TextArea',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Paragraph',
			id: null,
			required: false,
			type: 'FormField::TextArea',
			settings: {}
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<textarea readonly="readonly"></textarea>'))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@rangeField({characters: 'Characters', words: 'Words'})
			@requiredField()
		]
}

UserDateField = FormField.extend {
	type: 'UserDate',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'UserDate',
			id: null,
			required: false,
			type: 'FormField::UserDate',
			settings: {}
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		'<div class="row-fluid">
			<div class="span8">
				<div class="control-group select required activity_company_user_id">
					<label class="select required control-label" for="activity_company_user_id">User</label>
					<div class="controls">
						<select class="select" id="activity_company_user_id" name="activity[company_user_id]"
										disabled="disabled"></select>
					</div>
				</div>
			</div>
			<div class="span4"><div class="control-group date_picker required activity_activity_date">
				<label class="date_picker required control-label" for="activity_activity_date">Date</label>
				<div class="controls">
					<input class="date_picker required field-type-date datepicker hasDatepicker"
								 id="activity_activity_date" readonly="readonly" name="activity[activity_date]"
								 size="30" type="text" value="mm/dd/yyyy"></div>
				</div>
			</div>
		</div>'

	attributesForm: () ->
		false
}

TextField = FormField.extend {
	type: 'Text',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Single line text',
			id: null,
			required: false,
			type: 'FormField::TextArea',
			settings: {}
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<input type="text" readonly="readonly">'))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@rangeField({characters: 'Characters', words: 'Words'})
			@requiredField()
		]
}

NumberField = FormField.extend {
	type: 'Number',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Number',
			id: null,
			required: false,
			type: 'FormField::Number',
			settings: {}
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<input type="text" readonly="readonly">'))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@rangeField({digits: 'Digits', value: 'Value'})
			@requiredField()
		]
}

CurrencyField = FormField.extend {
	type: 'Currency',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Price',
			id: null,
			required: false,
			type: 'FormField::Number',
			settings: {}
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<div class="input-prepend"><span class="add-on">$</span><input type="text" readonly="readonly"></div>'))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@rangeField({digits: 'Digits', value: 'Value'})
			@requiredField()
		]
}

DropdownField = FormField.extend {
	type: 'Dropdown',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Dropdown',
			id: null,
			min_options_allowed:1,
			required: false,
			type: 'FormField::Dropdown',
			settings: {},
			options: []
		}, attributes)

		if @attributes.options.length is 0
			@attributes.options = [{id: null, name: 'Option 1', ordering: 0}]

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<select disabled="disabled">').append(
				$('<option>').attr('value', '').text(''),
				$.map @attributes.options, (option, index) =>
					if option._destroy isnt '1' and not @_optionIsExcluded(option)
						$('<option>').attr('value', option.id).text(option.name)
			))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@optionsField('option'),
			@requiredField()
		]

}

RadioField = FormField.extend {
	type: 'Radio',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Multiple Choice',
			id: null,
			min_options_allowed:1,
			required: false,
			type: 'FormField::Radio',
			settings: {},
			options: []
		}, attributes)

		if @attributes.options.length is 0
			@attributes.options = [{id: null, name: 'Option 1', ordering: 0}]

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label control-group-label">').text(@attributes.name),
			$('<div class="controls">').append(
				$.map @attributes.options, (option, index) =>
					if option._destroy isnt '1' and not @_optionIsExcluded(option)
						$('<label>').addClass('radio').append(
							$('<input>').attr('type', 'radio').attr('value', option.id)
						).append(' '+ option.name)
			)
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@optionsField('option'),
			@requiredField()
		]
}

PercentageField = FormField.extend {
	type: 'Percentage',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Percent',
			id: null,
			min_options_allowed:2,
			required: false,
			type: 'FormField::Percentage',
			settings: {},
			options: []
		}, attributes)

		if @attributes.options.length is 0
			@attributes.options = [
				{id: null, name: 'Option 1', ordering: 0},
				{id: null, name: 'Option 2', ordering: 1},
				{id: null, name: 'Option 3', ordering: 2}]

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append(
				$('<div class="percentage-progress-bar text-info">
					<div class="progress progress-info">
					<div class="bar" style="width: 0%;"></div>
					</div>
					<div class="counter">0%</div>
				</div>'),
				$.map @attributes.options, (option, index) =>
					id = "form_field_option_#{Math.floor(Math.random() * 100) + 1}_#{index}"
					if option._destroy isnt '1' and not @_optionIsExcluded(option)
						$('<div class="control-group">').append(
							$('<div class="input-append"><input type="text" id="'+id+'" readonly="readonly"><span class="add-on">%</span>')
							$('<label for="'+id+'">').addClass('segment-label').text(' '+ option.name)
						)
			)
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@optionsField('option'),
			@requiredField()
		]
}

PhotoField = FormField.extend {
	type: 'Photo',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Photo',
			id: null,
			required: false,
			type: 'FormField::Photo',
			settings: {},
			options: []
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append(
				$('<div class="attachment-panel photos">').append(
					$('<div class="attachment-select-file-view">').append(
						$('<div class="drag-box">').append(
							$('<i class="icon-upload">'),
							$('<div class="drag-box-text">').append(
								$('<h5>').text('DRAG & DROP'),
								$('<p>').append('your file or ', $('<span class="file-browse">browse</span>').append('<input id="fileupload" type="file" name="file" class="valid">'))
							)
						)
					)
				)
			)
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@requiredField()
		]
}

AttachmentField = FormField.extend {
	type: 'Attachment',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Attachment',
			id: null,
			required: false,
			type: 'FormField::Attachment',
			settings: {},
			options: []
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append(
				$('<div class="attachment-panel small">').append(
					$('<div class="attachment-select-file-view">').append(
						$('<div class="drag-box">').append(
							$('<i class="icon-upload">'),
							$('<div class="drag-box-text">').append(
								$('<h5>').text('DRAG & DROP'),
								$('<p>').append('your file or ', $('<span class="file-browse">browse</span>').append('<input id="fileupload" type="file" name="file" class="valid">'))
							)
						)
					)
				)
			)
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@requiredField()
		]
}

CalculationField = FormField.extend {
	type: 'Calculation',

	operations:
		'+':
			name: 'add'
			tooltip: 'Add'
		'-':
			name: 'subtract'
			tooltip: 'Subtract'
		'*':
			name: 'multiply'
			tooltip: 'Multiply'
		'/':
			name: 'divide'
			tooltip: 'Divide'

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Calculation',
			id: null,
			min_options_allowed: 2,
			required: false,
			type: 'FormField::Calculation',
			settings: {},
			options: []
		}, attributes)

		if @attributes.options.length is 0
			@attributes.options = [
				{id: null, name: 'Option 1', ordering: 0},
				{id: null, name: 'Option 2', ordering: 1}
			]
		@attributes.settings ||= {}
		@attributes.settings.operation ||= '+'
		@attributes.settings.calculation_label ||= 'TOTAL'

		@

	_renderField: () ->
		fieldId = ''+ (Math.floor(Math.random() * 1000) + 1)

		[
			$('<label class="control-label control-group-label">').text(@attributes.name),
			$('<div class="controls">').append(
				$('<table class="calculation-field">').append(
					$('<tbody>').append(
						$.map @attributes.options, (option, index) =>
							if option._destroy isnt '1' and not @_optionIsExcluded(option)
								$('<tr class="field-option">').append(
									$('<td class="operation '+@operations[@attributes.settings.operation]['name']+'">').append(
										$('<label for="option-'+fieldId+index+'">').addClass('calculation').text(option.name+ ' ')
									),
									$('<td>').append(
										$('<input name="option-'+fieldId+index+'" '+
															'id="option-'+fieldId+index+'" ' +
															'type="text" readonly="readonly">')
									)
								)
					).append(
						$('<tr class="field-option calculation-total-field">').append(
							$('<td colspan="2" class="text-right">').append(
								$('<div>').append(
									$('<label>').addClass('calculation').text(@attributes.settings.calculation_label + ':'),
									$('<span class="calculation-total-amount">0.00</span>')
								)
							)
						)
					)
				)
			)
		]

	calculationLabelField: () ->
		$('<div class="control-group calculation-label">').append([
			$('<label class="control-label" for="field_name">').text('Calculation label'),
			$('<div class="controls">').append $('<input type="text" id="calculation_label" name="calculation_label">').val(@attributes.settings.calculation_label).on 'keyup', (e) =>
					input = $(e.target)
					@attributes.settings.calculation_label = input.val()
					@form.setModified()
					@refresh()
					true
		])

	operationField: () ->
		oper = @attributes.settings.operation
		items = $(Object.keys(@operations)).map (index, operation) =>
			'<a class="has-tooltip btn '+(if oper is operation then 'active' else '')+'" title="'+@operations[operation]['tooltip']+'" data-operation="'+operation+'" href="#"><i class="icon icon-calculation-'+@operations[operation]['name']+'"></i></a>'
		$('<div class="control-group calculation-operations">').append(
			$('<label class="control-label" for="field_name">').text('Operation'),
			$('<div class="btn-group"></div>').html(items.get().join(''))
		).on 'click', 'a.btn', (e) =>
			e.preventDefault();
			operation = $(e.currentTarget).data('operation')
			if @attributes.id && operation != @attributes.settings.operation
				bootbox.confirm 'Are you sure you want to change the operation from '+ @operations[@attributes.settings.operation]['tooltip'] + ' to ' + @operations[operation]['tooltip'] + '?  Doing so will cause all previously saved data to be recalculated.', (answer) =>
					@setOperation operation, $(e.currentTarget) if answer
					true
			else
				@setOperation operation, $(e.currentTarget)

	setOperation: (operation, target) ->
		target.closest('.btn-group').find('.active').removeClass('active').end().end().addClass('active')
		@attributes.settings.operation = target.data('operation')
		@form.setModified()
		@refresh()
		true

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@operationField(),
			@optionsField('option', ['Item', 'Items']),
			@calculationLabelField(),
			@requiredField()
		]
}

LikertScaleField = FormField.extend {
	type: 'LikertScale',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Likert scale',
			id: null,
			have_results: false,
			min_options_allowed: 1,
			min_statements_allowed: 1,
			required: false,
			multiple: false,
			type: 'FormField::LikertScale',
			settings: {},
			options: [],
			statements: []
		}, attributes)

		if @attributes.id is null
			@attributes.options = [
				{id: null, name: 'Strongly Disagree', ordering: 0},
				{id: null, name: 'Disagree', ordering: 1},
				{id: null, name: 'Agree', ordering: 2},
				{id: null, name: 'Strongly Agree', ordering: 3}
			]

			@attributes.statements = [
				{id: null, name: 'Statement 1', ordering: 0},
				{id: null, name: 'Statement 2', ordering: 1},
				{id: null, name: 'Statement 3', ordering: 2}
			]

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label control-group-label">').text(@attributes.name),
			$('<div class="controls">').append(
				$('<table class="table likert-scale-table">').append(
					$('<thead>').append(
						$('<tr>').append($('<th>')).append($.map(@attributes.options, (option)-> $('<th>').append($('<label>').text(option.name))))
					)
				).append(
					$('<tbody>').append(
						$.map @attributes.statements, (statement, index) =>
							$('<tr>').append($('<td>').append($('<label>').text(statement.name))).append(
								$.map @attributes.options, (option, index) =>
									$('<td>').append(
										if @attributes.multiple is false #Single Answer
											$('<label class="radio"><div class="radio"><input type="radio"></div></label>')
										else #Multiple Answer
											$('<label class="checkbox multiple"><div class="checkbox"><input type="checkbox"></div></label>')
									)
							)
					)
				)
			)
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			$('<div class="control-group">').append(
				@optionsField('statement'),
				[
					if @attributes.have_results is false
						@optionsType()
					else
						null
				],
				@optionsField('option')
			),
			@requiredField()
		]
}

CheckboxField = FormField.extend {
	type: 'Checkbox',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Checkboxes',
			id: null,
			min_options_allowed:1,
			required: false,
			type: 'FormField::Checkbox',
			settings: {},
			options: []
		}, attributes)

		if @attributes.options.length is 0
			@attributes.options = [{id: null, name: 'Option 1', ordering: 0}]

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label control-group-label">').text(@attributes.name),
			$('<div class="controls">').append(
				$.map @attributes.options, (option, index) =>
					if option._destroy isnt '1' and not @_optionIsExcluded(option)
						$('<label>').addClass('checkbox').append(
							$('<input>').attr('type', 'checkbox').attr('value', option.id)
						).append(' '+ option.name)
			)
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@optionsField('option'),
			@requiredField()
		]
}


BrandField = FormField.extend {
	type: 'Brand',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Brand',
			id: null,
			min_options_allowed:1,
			required: false,
			type: 'FormField::Brand',
			settings: {},
			options: []
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<select disabled="disabled">'))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@requiredField()
		]
}

MarqueField = FormField.extend {
	type: 'Marque',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Marque',
			id: null,
			min_options_allowed:1,
			required: false,
			type: 'FormField::Marque',
			settings: {},
			options: []
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<select disabled="disabled">'))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@requiredField()
		]
}

DateField = FormField.extend {
	type: 'Date',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Date',
			id: null,
			required: false,
			type: 'FormField::Date',
			settings: {}
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<input type="text" class="date_picker" value="dd/mm/yyyy" readonly="readonly">'))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@requiredField()
		]
}

TimeField = FormField.extend {
	type: 'Time',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Time',
			id: null,
			required: false,
			type: 'FormField::Time',
			settings: {}
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<input type="text" class="time_picker" value="hh:mm pm" readonly="readonly">'))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@requiredField()
		]
}

PlaceField = FormField.extend {
	type: 'Place',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Place',
			id: null,
			required: false,
			type: 'FormField::Place',
			settings: {}
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<label class="control-label">').text(@attributes.name),
			$('<div class="controls">').append($('<input type="text" readonly="readonly">'))
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@labelField(),
			@requiredField()
		]
}

Module =  FormField.extend {
	getSaveAttributes: () ->
		{field_type: 'module', name: @fieldType().toLowerCase(), settings: @attributes.settings }

	fieldType: ->
		@__proto__.type

	render: () ->
		@field ||= $('<div class="form-section module" data-type="' + @__proto__.type + '">')
			.data('field', @)
			.append @_renderField()

	_onRemove: ->
		@form.fieldsWrapper.find('.module[data-type='+@fieldType()+']').show()

	_removeConfirmationMessage: (withData) ->
		"Removing this module will remove all the entered data associated with it.<br/>&nbsp;<p>Are you sure you want to do this?</p>"

	requiredField: (label = 'Required') ->
		$('<div class="control-group">').append([
			$('<div class="controls">').append(
				$('<label class="control-label" for="option_required_chk">').text(label).prepend(
					$('<input type="checkbox" id="option_required_chk" name="required"'+(if @attributes.settings.required == 'true' then ' checked="checked"' else '')+'">').on 'change', (e) =>
						@attributes.settings.required = (if e.target.checked then 'true' else 'false')
						@form.setModified()
						true
				)
			)
		])
}

SurveysField = Module.extend {
	type: 'Surveys',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Surveys'
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<h5 class="module-title">SURVEYS MODULE</h5>'),
			$('<div class="module-wrapper">').append(
				@_removeButton(),
				$('<img src="<%= asset_path('surveys.svg') %>" width="235" height="229" />')
			)
		]

	attributesForm: () ->
		window.setTimeout () ->
			$.get '/brands.json', (response) ->
				tags = []
				for result in response
					tags.push {id: result.id, text: result.name }
				$('input[name=brands].select2-field').show().select2
					maximumSelectionSize: 5
					tags: tags
		, 100

		[
			$('<h4>').text('Field Settings'),
			$('<div class="control-group">').append [
				$('<label class="control-label">').text('Brands'),
				$('<div class="controls">').append(
					$('<input type="text" name="brands" class="select2-field">').hide().val(
						if @attributes.settings? and @attributes.settings.brands then @attributes.settings.brands else ''
					).on "change", (e) =>
						input = $(e.target)
						@attributes.settings.brands = input.select2("val")
						@form.setModified()
						true
				)
			]
		]
}

CommentsField = Module.extend {
	type: 'Comments',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Comments'
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<h5 class="module-title">COMMENTS MODULE</h5>'),
			$('<div class="module-wrapper">').append(
				@_removeButton(),
				$('<img src="<%= asset_path('comments.svg') %>" width="235" height="285" />')
			)
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@rangeField()
		]
}

PhotosField = Module.extend {
	type: 'Photos',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Photos'
		}, attributes)

		@attributes.settings ||= {}

		@

	_renderField: () ->
		[
			$('<h5 class="module-title">MEDIA GALLERY MODULE</h5>'),
			$('<div class="module-wrapper">').append(
				@_removeButton(),
				$('<img src="<%= asset_path('photos.svg') %>" width="235" height="337" />')
			)
		]

	attributesForm: () ->
		[
			$('<h4>').text('Field Settings'),
			@rangeField()
		]
}

ExpensesField = Module.extend {
	type: 'Expenses',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Expenses'
		}, attributes)

		@attributes.settings ||= {}
		@attributes.settings.categories ||= @form.options.defaultExpensesCategories

		@

	_renderField: () ->
		[
			$('<h5 class="module-title">EXPENSES MODULE</h5>'),
			$('<div class="module-wrapper">').append(
				@_removeButton(),
				$('<img src="<%= asset_path('expenses.svg') %>" width="235" height="337" />')
			)
		]

	attributesForm: () ->
		window.setTimeout () =>
			$('input[name=categories].select2-field').show().select2
				tags: @form.options.defaultExpensesCategories
		, 100

		[
			$('<h4>').text('Field Settings'),
			@rangeField(),
			@requiredField('Receipts required'),
			$('<div class="control-group">').append [
				$('<label class="control-label">').text('Categories'),
				$('<div class="controls">').append $('<input type="text" name="categories" class="select2-field">').hide().val(@attributes.settings.categories).on "change", (e) =>
					input = $(e.target)
					@attributes.settings.categories = input.select2("val")
					@form.setModified()
					true
			]

		]
}

AttendanceField = Module.extend {
	type: 'Attendance',

	init: (form, attributes) ->
		@form = form
		@attributes = $.extend({
			name: 'Attendance'
		}, attributes)

		@attributes.settings ||= { }

		@

	_renderField: () ->
		[
			$('<h5 class="module-title">ATTENDANCE MODULE</h5>'),
			$('<div class="module-wrapper">').append(
				@_removeButton(),
				$('<img src="<%= asset_path('attendance.svg') %>" width="235" height="337" />')
			)
		]

	attributesForm: () ->
		return false unless @form.options.kbmgEnabled
		[
			$('<h4>').text('Field Settings'),
			( if @form.options.kbmgEnabled
					$('<div class="control-group">').append([
						$('<label class="control-label" for="attendance_api_key">').text('KBMG API Key'),
						$('<input id="attendance_api_key" name="api_key" type="text">').val(@attributes.settings.api_key).on 'keyup', (e) =>
							input = $(e.target)
							@attributes.settings.api_key = input.val()
							@form.setModified()
							true
					])
				else null)
		]
}

applyFormUiFormatsTo = (element) ->
	element.find('select').chosen()
	element.find("input:checkbox, input:radio, input:file").uniform()
	element.find('.has-tooltip').tooltip({html: true, delay: 0, animation: false})

